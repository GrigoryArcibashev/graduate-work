using System.Linq;
using Model;
using Model.Creatures.CreatureInterfaces;
using NUnit.Framework;

namespace Tests
{
    [TestFixture]
    public class AttackAndDeathOfCreaturesTests
    {
        private static GameMap map;

        [Test]
        public void PlayerDiesIfHealthEqualsToZero()
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel("test8.txt");
            map = new GameMap();

            map.Player.ChangeHealthBy(100);
            Assert.AreEqual(0, map.Player.Health);
            Assert.AreEqual(MovementCondition.Dying, map.Player.MovementCondition);
        }

        [Test]
        public void PlayerCannotMoveThroughEnemyAndChests()
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel("test10.txt");
            map = new GameMap();

            var initialPlayerLocation = map.GetCreatureLocation(map.Player);
            map.MoveCreature(map.Player, Direction.Right);
            map.MoveCreature(map.Player, Direction.Left);
            map.MoveCreature(map.Player, Direction.Up);
            map.MoveCreature(map.Player, Direction.Down);
            Assert.AreEqual(initialPlayerLocation, map.GetCreatureLocation(map.Player));
        }

        [Test]
        public void PlayerDiesFromTheEnemy()
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel("test10.txt");
            map = new GameMap();

            for (var i = 0; i < 1000; i++)
            {
                map.MakeEnemiesAttackingOrRunning();
                CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            }

            Assert.AreEqual(MovementCondition.Dying, map.Player.MovementCondition);
        }

        [Test]
        public void EnemyChasesThePlayerIfDistanceIsShort()
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel("test11.txt");
            map = new GameMap();
            map.MakeEnemiesAttackingOrRunning();
            var enemy = map.ListOfCreatures.OfType<IEnemy>().ToArray()[0];
            Assert.AreEqual(MovementCondition.Running, enemy.MovementCondition);
            Assert.AreEqual(Direction.Left, enemy.Direction);
        }

        [Test]
        public void EnemyNotChasesThePlayerIfDistanceIsLong()
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel("test12.txt");
            map = new GameMap();
            map.MakeEnemiesAttackingOrRunning();
            var enemy = map.ListOfCreatures.OfType<IEnemy>().ToArray()[0];
            Assert.AreEqual(MovementCondition.Standing, enemy.MovementCondition);
        }

        [TestCase("test13.txt")]
        [TestCase("test14.txt", TestName = "EnemyOnThePlayer")]
        [TestCase("test15.txt", TestName = "PlayerOnTheEnemy")]
        public void EnemyDiesWithTwoBlowsFromThePlayer(string levelName)
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel(levelName);
            map = new GameMap();

            var enemy = map.ListOfCreatures.OfType<IEnemy>().ToArray()[0];
            for (var i = 0; i < 1000; i++)
            {
                map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Attacking, Direction.Right);
                CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            }

            Assert.AreEqual(MovementCondition.Dying, enemy.MovementCondition);
        }

        [Test]
        public void PlayerDoesntKillTheEnemyIfHeIsTurnedAwayFromIt()
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel("test13.txt");
            map = new GameMap();

            var enemy = map.ListOfCreatures.OfType<IEnemy>().ToArray()[0];
            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Attacking, Direction.Left);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            Assert.AreNotEqual(MovementCondition.Dying, enemy.MovementCondition);
        }

        [Test]
        public void EnemyDeletesFromTheMapAfterTheDeath()
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel("test13.txt");
            map = new GameMap();

            var enemy = (IMovingCreature) map[1, 4];
            enemy.ChangeMovementConditionAndDirectionTo(MovementCondition.Dying, enemy.Direction);
            var chest = (ICreatureWithHealth) map[1, 3];
            chest.ChangeHealthBy(int.MaxValue);

            map.RemoveCreaturesFromMapIfTheyAreDead();

            Assert.AreEqual(false, map.ListOfCreatures.Contains(enemy));
            Assert.AreEqual(null, map[1, 4]);
            Assert.AreEqual(false, map.ListOfCreatures.Contains(chest));
            Assert.AreEqual(null, map[1, 3]);
        }

        [Test]
        public void PlayerIsOnTheEnemyAndFallsAfterHeKillsHim()
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel("test16.txt");
            map = new GameMap();
            var expectedPlayerLocation = map.GetCreatureLocation(map.Player);
            expectedPlayerLocation.Y++;
            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Attacking, Direction.Right);
            for (var i = 0; i < 1000; i++)
            {
                map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Attacking, Direction.Right);
                CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            }

            map.RemoveCreaturesFromMapIfTheyAreDead();
            map.CheckCreaturesForFalling();
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            Assert.AreEqual(expectedPlayerLocation, map.GetCreatureLocation(map.Player));
        }
    }
}

ï»¿using System.Drawing;
using System.Linq;
using Model;
using Model.Creatures.CreatureInterfaces;
using NUnit.Framework;

namespace Tests
{
    [TestFixture]
    public class CreatureMovementTests
    {
        private static GameMap map;

        [Test]
        public void PlayerMoveToEverySide()
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel("test1.txt");
            map = new GameMap();

            var initCreatureLocation = map.GetCreatureLocation(map.Player);

            var expectedCreatureCoordinates = new[]
            {
                initCreatureLocation + new Size(1, 0),
                initCreatureLocation,
                initCreatureLocation + new Size(0, -map.Player.Velocity),
                initCreatureLocation + new Size(0, 0),
            };

            map.MoveCreature(map.Player, Direction.Right);
            Assert.AreEqual(expectedCreatureCoordinates[0], map.GetCreatureLocation(map.Player));

            map.MoveCreature(map.Player, Direction.Left);
            Assert.AreEqual(expectedCreatureCoordinates[1], map.GetCreatureLocation(map.Player));

            map.MoveCreature(map.Player, Direction.Up);
            Assert.AreEqual(expectedCreatureCoordinates[2], map.GetCreatureLocation(map.Player));

            map.Player.RecoverVelocity();
            map.MoveCreature(map.Player, Direction.Down);
            Assert.AreEqual(expectedCreatureCoordinates[3], map.GetCreatureLocation(map.Player));
        }

        [Test]
        public void PlayerCanNotMoveOffMap()
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel("test2.txt");
            map = new GameMap();
            var expectedCreatureLocation = map.GetCreatureLocation(map.Player);

            map.MoveCreature(map.Player, Direction.Right);
            Assert.AreEqual(expectedCreatureLocation, map.GetCreatureLocation(map.Player));

            map.MoveCreature(map.Player, Direction.Left);
            Assert.AreEqual(expectedCreatureLocation, map.GetCreatureLocation(map.Player));

            map.MoveCreature(map.Player, Direction.Up);
            Assert.AreEqual(expectedCreatureLocation, map.GetCreatureLocation(map.Player));

            map.MoveCreature(map.Player, Direction.Down);
            Assert.AreEqual(expectedCreatureLocation, map.GetCreatureLocation(map.Player));
        }


        [TestCase("test3.txt", TestName = "There is not empty space under the creatures")]
        [TestCase("test4.txt", TestName = "Empty space under the creatures")]
        public void CheckCreaturesForFallingTestWhenCreaturesAreJumpingOrFalling(string level)
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel(level);
            map = new GameMap();

            foreach (var creature in map.ListOfCreatures.OfType<IJumpingCreature>())
                creature.ChangeMovementConditionAndDirectionTo(MovementCondition.Jumping, creature.Direction);

            var expectedMovementConditionsOfCreatures = GetMovementConditionsOfCreaturesOnMap();
            map.CheckCreaturesForFalling();
            Assert.AreEqual(GetMovementConditionsOfCreaturesOnMap(), expectedMovementConditionsOfCreatures);

            foreach (var creature in map.ListOfCreatures.OfType<IJumpingCreature>())
                creature.ChangeMovementConditionAndDirectionTo(MovementCondition.Falling, creature.Direction);

            expectedMovementConditionsOfCreatures = GetMovementConditionsOfCreaturesOnMap();
            map.CheckCreaturesForFalling();
            Assert.AreEqual(GetMovementConditionsOfCreaturesOnMap(), expectedMovementConditionsOfCreatures);
        }


        [Test]
        public void PlayerShouldFallWhenEmptySpaceUnderItAndWhenNotJumping()
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel("test3.txt");
            map = new GameMap();

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Attacking, map.Player.Direction);
            map.CheckCreaturesForFalling();
            Assert.AreEqual(MovementCondition.Falling, map.Player.MovementCondition);

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Dying, map.Player.Direction);
            map.CheckCreaturesForFalling();
            Assert.AreEqual(MovementCondition.Falling, map.Player.MovementCondition);

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Falling, map.Player.Direction);
            map.CheckCreaturesForFalling();
            Assert.AreEqual(MovementCondition.Falling, map.Player.MovementCondition);

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Running, map.Player.Direction);
            map.CheckCreaturesForFalling();
            Assert.AreEqual(MovementCondition.Falling, map.Player.MovementCondition);

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Standing, map.Player.Direction);
            map.CheckCreaturesForFalling();
            Assert.AreEqual(MovementCondition.Falling, map.Player.MovementCondition);
        }


        [Test]
        public void PlayerShouldNotFallWhenNotEmptySpaceUnderIt()
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel("test4.txt");
            map = new GameMap();

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Attacking, map.Player.Direction);
            var expectedMovementCondition = GetMovementConditionsOfCreaturesOnMap().FirstOrDefault();
            map.CheckCreaturesForFalling();
            Assert.AreEqual(expectedMovementCondition, map.Player.MovementCondition);

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Dying, map.Player.Direction);
            expectedMovementCondition = GetMovementConditionsOfCreaturesOnMap().FirstOrDefault();
            map.CheckCreaturesForFalling();
            Assert.AreEqual(expectedMovementCondition, map.Player.MovementCondition);

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Falling, map.Player.Direction);
            expectedMovementCondition = GetMovementConditionsOfCreaturesOnMap().FirstOrDefault();
            map.CheckCreaturesForFalling();
            Assert.AreEqual(expectedMovementCondition, map.Player.MovementCondition);

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Running, map.Player.Direction);
            expectedMovementCondition = GetMovementConditionsOfCreaturesOnMap().FirstOrDefault();
            map.CheckCreaturesForFalling();
            Assert.AreEqual(expectedMovementCondition, map.Player.MovementCondition);

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Standing, map.Player.Direction);
            expectedMovementCondition = GetMovementConditionsOfCreaturesOnMap().FirstOrDefault();
            map.CheckCreaturesForFalling();
            Assert.AreEqual(expectedMovementCondition, map.Player.MovementCondition);
        }


        [Test]
        public void UpdatePlayerLocationOnMap()
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel("test1.txt");
            map = new GameMap();

            var initCreatureLocation = map.GetCreatureLocation(map.Player);
            var expectedCreatureCoordinates = new[]
            {
                initCreatureLocation + new Size(1, 0),
                initCreatureLocation,
                initCreatureLocation + new Size(1, -map.Player.Velocity),
                initCreatureLocation + new Size(0, -2 * map.Player.Velocity),
                initCreatureLocation + new Size(1, -map.Player.Velocity),
                initCreatureLocation,
                initCreatureLocation + new Size(0, map.Player.Velocity)
            };
h/x+^F.u9Z-f9&y9]Vi9i7'0SUfi7dk=He6a'+MRn3H	V{Jln&+hu9.2r
de0]Wn:.&3Fe9Na'+MRn3H	e+9RtN&5Jw7\M3X(n0[,WABc2H
F+Mhsa" @ -UWQi<W:
Ajb6,2
Xa9\dQha1Zhse0]
{r2X.G+IJs*.7#L X(@  @p9.fQJ 9]#%F #X-V*5Bp,l
 @ jF+Mh] @ +	Xi1Hf{%H (KdD4Y.4Ke0[FBbu0[5#=4e9eH(@  @{ @  @M0\7Bt7\Edc=Bd&.f+1f(W3Xs#n%#ft9HEX(@  @ k`C9,#=d.#[jFz1Jv2[QJs:g#ah"Na" @  @ , z 7.rBm2S, R;D @  @ 6X.rAXa<Y."r
Pa7lTCBl:'I b0
'0Q @  @ MJr:H
q:X-BA@X 6X.rAXa<Y."r!Ja6
Il  @ fs2\NBrde"\.V0PM7]LVk\t![mf#%hi7[Ed#eRn3Kk`.(Kd.&[nf+5Jn:mvsRt4[mbIl  @ >BA" @ m(e9]PQ @ `u1
lo4Y1By2\H69\o:-w3(h9nV;!
n2[/9HC4.7#LP) @ 0Q @  @ 	VAr2X.F{H\L7X,Dcle6e1Jv2[43=dT2\nGR; @  @M0\7Bt7\Ed;=(o&.f+0P":.7!D`.:B$v
 @ Za8R9Jwlka8
X(  @ YBr-fKQRa6
FeJr&l6QRo7R5BplW"
de0]Wo1X.FK=\(6X.rAXa<Y."Il  @ 5Bp-w3r2X.G+IJ(6X.rAXa<Y."ai9,7#%^nM;!h)BD @  @ 6X.r5^v2Pn&+hu9%k`.(Kd,
Ft4[mbr1Jf:
'0Q @  @ 
V@\M7]LTIJa:.&)!Za8Jcre9#%de1]
{8\U8
'0Q @  @ 
V@\M7]LTIJa:.&)!Za8Jcre9#%de1]
{8\D7]mbIl  @ fs2\NBrde"\.V0Pi7.FKXP6/+Io1X.FK=\,,9e:n&+hu9)F{
Bt4[mbC5Bp
FeJrJ'0Q @ z
 @ 5#ft.BD @ UDl4Xd3=Rd
FeJr",Wdo6U
*\e6^%H(@  @{ @  @M0\7Bt7\Edc=Bd&.f+1f(W3Xs#n%#ft9HEX(@  @ k`C9,#=d.#[jFz1Jv2[QJs:&sQpt
'0Q @  @ 
V@@=LW9a6Y)V@P)BA" @  @ Mw Pv0\DI z dI x Ll@iJeQ @  @ 0Q @  @  @m0\dkVe"[LVk%Js ]F
Vi7iwIjn7-f9 R; @  @ IJa:.&*1^c0]
{9n2mvsRt4[mgU`d0]W9*p2.F*1^c0]
{9n2mvsRt4[mbC5BpNa" @  @ ! Q @  @ MJr:H
q:X-BB5^v2[,VsQo7
#%^nK9N,,9 l0^,W9o;-V+9hC7[LFKQRo7
'0Q @ z
 @ 5#ft.BD @ UDl4Xd3=Rd-f+5rC4.6+M(h2T
FeJr$YHFKMha7lTKM&h7\NBA$  @ =BD @  @ &X.IJa:n"r1^a2W3XsIF+YJl9QMwQJs:d"Il  @ 5Bp!\LVQ^rmu#=e;-BA	he9]	9hx:EX(@  @ k` H
f+\@G0[,Tk`(Na" @  @ ,9a5Y(VsZi2\h#QBc5Z-f:=dR:[MfK9N(Na" @  @ LJn2[/t@m0\dc%ft'YH7Bt:\LW9f*.)qE7-WIxP)
tIda<JYA:; @  @A9\lWP\A9(WUBl-w3Ze76{9Hi:-vq9$u7MsX 2[LVkd\M7]LVk\t![mf#%hi7[EX(@  @ Mfe9dIJE8],a!i9,7#%^nV3PX 2[LVkd\D4\LVQRo7
'0Q @ z
 @ 5#ft.BD @ UDl4Xd3=Rd-f+5rN7]6Cfe9U
*AXa<Y.$Ki9]s
JI9S
vsP) @ 0Q @  @ 	VAr2X.F{H\L7X,Dcle6e1Jv2[43=dT2\nGR; @  @M0\7Bt7\Ed;=(o&.f+0P":.7!Dd.:B$v
 @ Za8R9Jwlka8
X(@  @ k`.&X-6*\e6Z,Wht0Xm6K9NO9NVs9Rn3JX(@  @ 3d 2[LVkd@=,9i9]	v2
de0]Wf.'YJGKAJ<$Q-f+5r>
%e#=r9/A%60.Na" @  @ .7dt.&*bu0[k=le6Y-g"
^n2.FK=\.)]sRn3K+9Jm<KIV{YJm2[ND=\d4]
{8R; @ PP(@  @[*.7"
Bs2J'#ftLeg#ah"W!" @ m(e9]6MJ(WPb4!X *.7"9Bm2HR
n2[/{9(h2T
FeJr
+PQ @ 6T2\nDfeNF+Mh1KNGCPD,WQa6Y$i DP6/+In*T+9Jm<HEh(@  @p:XMFK@v7Z,B\e6^(FKfW4]
#]^B6nwdo6U
*AXa<Y."CMhr4[Lr1Jv2[	f5J) @ 0Q @  @ 	VAr2X.F{H\L7X,Dcle6e1Jv2[43=dT2\nGR; @  @M0\7Bt7\Ed;=(o&.f+0Pl2]LVb9Bm2J'0Q @  @ 
V@@=LW9a6Y)V@P)BA" @  @ LJn2[/t@m0\dc%ft'YH7Bt:\LW9f*.)qE7-WIxP)
tIda<JYA:; @  @f7\DCYBr$i `;$a b02$V+BD @  @ =BD @  @ 5Bp
FeJrm9Ne&[nf+5Jn:mvsRt4[md9HD4\LVQRo7
rB5^v2[,VsQo7
#%^n.G#Fk4[Lrai9,7#%^nM;!h)BD @  @ 
de0]Wo1X.FK=\A76{9Hi:-vsM*p2.F+H\U8#o1X.FK=\A76{9Hi:-vq!Za8
'0Q @  @ PP(@  @ Mfe9dIJE8],a!o;-V+9hC7[LFKQRo7HGK%\gVsZy-w3Ze76{9Hi:-vq$v
 @ ! Q @ 6T2\nEh(@  @p:XMFK@v7Z,BAXa<Y.$#=Js7	6K1XT4(VsZy$YI*%fT:\Mf+w0^(g=ZI:
Q @ v
 @ a8n&+ho9IF{HL2]LVcLP"&.f+1fF7\JF+Mhs
'0Q @  @ 	VAr2X.F{H\G7U
tcle6
'#ftLeg#ah"Na" @  @ , z 7.rBm2S, R;D @  @ ;."\e6^$iZa8IFKMhO3n&+hu9.2r=LT<\Sb%
n2[/q R.*hIBy
+3tv
 @ Za8Jcre9H6C\g2S-w3Ze76{9Hi:-vr\d".&+
hi7[JFy!o;-V+9hC7[LFKQRo7H#QBc5Z-f90@D4\LVQRo7IF+h)BD @  @ !\LVQjr2S
vhi7[Hso7
#%^n9U.#he9JWBt2S
vhi7[Hso7
#%^n,$v
 @ r2X.G+IJL7Xl#%^n [LD=\d4]
{9fU8#d.*\FQJL7Xl#%^n [LD=\d4]
{8Pm0\X(@  @ Mfe9dIJN7]WUBl-w3Ze76{9Hi:-vq9y4[LraJn2[/r5^v2[,VsQo7
#%^nNa" @ t
 @ jF+Mh] @ +	Xi1Hf{%H "[LVkee6.F+Mr7[*FCa8,g#dT4(F+hh
!" @ l  @ 5Bp!\LVQ^r
ve;-G DL2]LVcMo9WQf"Na" @  @ ,
de0]
w9o*iF+YJlNF+Mh1KNGCPD)BD @  @ 6X.t@n2]d;Ze&X.A$v
 @  @v0\D+9Jm<HR!M7]Msr2X.G+IJ),lb,
SX(@  @ +9Jm<KH6C\g2S-w3Ze76{9Hi:-vr\d".&+
hi7[JFy!o;-V+9hC7[LFKQRo7HGK%\gVsZy
Ft4[mbIl  @ YBrm+Mh HJ
de0]W.i:	+Xt4
$k`[Ktv
 @ Fh2\nBr
Pa7lTCBl:'I!Rn:IVa,a6,RIl
 @ Za8J&+5^v2Pn&+hu9.43I^m&X.K(h2^(e0YIl
 @ s9Y.'!9r2Q.+X(3-GX 6X.r1Rs:ldIJa:.&+L\C7[NF%\s-f+5r)Na" @  @ .7dt.&*bu0[sUXl
VA61Ei$v
 @ s9Y.'!9r2Q.+X(3-GX 6X.r1Rs:ldIJa:.&+L\C7[NF%\sm+Mh)Na" @  @ .7dt.&*bu0[sUXl
VA615i$v
 @ ! Q @ 6T2\nEh(@  @p:XMFK@v7Z,BAXa<Y.$KMn*T+9Jm<P-f"Bl6h3QJr$)6K1Xs$-RA$  @ =BD @  @ &X.IJa:n"r1^a2W3XsIF+YJl9QMwQJs:d"Il  @ 5Bp!\LVQ^rmu#=e;-BA	he9]19hx:EX(@  @ k` H
f+\@G0[,Tk`(Na" @  @ LJx8,7#HP6/+Io1X.FK=\ H
V@\G2]7Bt:\LTc=Fa:-vq!Za8Jcre9
'0Q @  @ WCAJc:,E1By2\IF{
Bt4[mbrdV+BD @  @ 6X.rAXa<Y."r
Pa7lTk=le6Y-g"
^n2.FK=\A7FKIJc:-vrQ^(&[nf+5Jn:mvsRt4[mbrht0Xm6K9N,
Ft4[mbrIRg4X(@  @ 3=d LR HYR @`;%2Y$  @ l  @  @ ,9 l0^,W9h0[Lv*5^v2[,VsQo7
#%^n [LD#%de1]
{9(o-w3Ze76{9Hi:-vq9t:,6[%\gFKIJc:-vq9$i3ZBIl  @  @ n&+hu9)F{
Bt4[md9HC7[LFKQRo7jWBt2\Ee+AHa:)F{
Bt4[md9HC7[LFKQRo7

V@R; @  @}D @  @ 6X.rIJm7]LTIJa:.&+Mr7[)VAf*WJde",! R; @  @m0\d!Jc5Pn&+hu9.43=dF0[
FK9N(Na" @  @ n&+hu9)F{
Bt4[md9HC7[LFKQRo7jWBt2\Ee+AHa:)F{
Bt4[md9HC7[LFKQRo7

V@R; @  @C9,#Ude&l6QRo7-f"
^n2.FK=\s*\FQJr.#he&l6QRo7-f"
^n2.FK=\(6X.Il  @ fs2\NBrde"\.V0Pe<VQJd(KdL7Xl#%^n
V@\G2]7Bt:\LTc=Fa:-vq!Za8Jcre9
%X(@  @}z
>BA-;henW%\goQJm&]Rn3Na'+MRn3H
7KMhe6KIFK9b;.6K9N &[lF+0v
:\ms@M7YVa9r2X.G+IJsn&+hu9)sQJr3,6+Lv
:\ms@N*[M!9r0[,W;=dkBA&sZe9\@T2\nG)v
m(e9]fKahu9+PQ @ V1RcmFMf !\LVQjr2S-w3Ze7
F+Mhsv
 @ &KYBt2H7#hi1Hv5JM0\k`;D @ ZQJs:!" @ Ajb6,2Y^i2
cre9-w3(o"]LWe&i2%H(@  @{ @  @M0\7Bt7\Edc=Bd&.f+1f(W3Xs#n%#ft9HEX(@  @ k`C9,#=d.#[jFz1Jv2[QJs:%g#ah"Na" @  @ , z 7.rBm2S, R;D @  @ ;."%\i:n&+hu9)F{
Bt4[mbt@m0\d;hC9,#Ude&l6QRo7

V@\P6/+HR;D @  @ ;."pp2XnF+r2X.G+IJC7[n&#%\a:.2t@n2]k5h(@  @ X(@  @  @ 4[M"
de0]Wo1X.FK=\ H
f+\@S4^LRADX 
%@Q @  @  @i7.DIJa:.&*1^c0]
{8X
 @  @ 
s%hC9,#Ude&l6QRo729JwmSP0Vk`.(Kd.+-F{
Rt<J%@Q @  @  @i7.DIJa:.&*1^c0]
{8@+LW9&i=%0@0K" @  @ '0P(@  @ k`.&[nf*
de0]WPm0\e1By2\EBRr2XnFK=\.),vCPR; @  @A9\lWP\A9(WUBl/Ft2Y7Bt:\LT=^r2-fQJs-LRaZa8Hv+Qr2X.G+IJL7Xl#%^n,9 l0^,W$R;D @  @ 6X.r5^v2Pn&+hu9%k`.(Kd,
Ft4[mbr1Jf:
'0Q @  @ MJr:H
q:X-BCpp2XnF+r2X.G+IJC7[n&#%\a:.5YE:,,9e:n&+hu9)F{
Bt4[mbC5Bp
FeJrJ'0P(@  @ k`.&[nf*
de0]WPm0\e1By2\EBRr2XnFK=\.*\X(@  @ Mfe9dIJE8],a!Jx8,7#HC9,#Ude![mwRn0]Wld]
V@\G2]7Bt:\LTc=Fa:-vq!Za8Jcre9
%X(  @ 5Bp
FeJrLV=le9LVc=Fi:%Il  @ 5Bp-w3r2X.G+IJ(6X.rAXa<Y."ai9,7#%^n
w;8R; @  @A9\lWP\A9(WUBl/Ft2Y7Bt:\LT=^r2-fQJs-LkRaZa8Hv+Qr2X.G+IJL7Xl#%^n,9 l0^,W$R; @ PP(@  @[*.7"t  @ 8,&c%F ;m! l0^,W
Bn'nDk=le'YLdk`(BD @ X(@  @ k`C9,#=d.&l"1Jv2[2A	e;-G^r*.7#LD)BD @  @ &X.IJa:n"r^T7SW3X(WPd.:B$v
 @ Za8R9Jwlka8
X(@  @ 3d 2^+
he2n&+hu9)F{
Bt4[mbt@m0\d;hC9,#Ude&l6QRo7

V@\P6/+HR;D @  @ 6X.r5^v2Pn&+hu9%k`.(Kd,
Ft4[mbrIRg4X(@  @ Mfe9dIJE8],a!Jx8,7#HC9,#Ude&l6QRo7k`.#Y.DIJa:.&*1^c0]
{8Pm0\e1By2\EIl
 @ Za8IV{YJC9,#Ude,9 l0^,W0@D4\LVQRo7IF+h)BD @  @  \n6+Ih. \LT+Eja6
WCAJc:,DIJa:.&*1^c0]
{8X 6X.rJt!\LVQjr2S
vhi7[Ek`.(Kd)Na Q @  @ 
V@\M7]LTIJa:.&)!Za8Jcre9#%de1]
{8\U8
'0Q @  @ MJr:H
q:X-BCpp2XnF+r2X.G+IJL7Xl#%^n
V@\G2]7Bt:\LTc=Fa:-vq!Za8Jcre9
%X(  @ 5Bp-w3r2X.G+IJ(6X.rAXa<Y."ai9,7#%^n
w;8R; @  @A9\lWP\A9(WUBl/Ft2Y7Bt:\LTc=Fa:-vq0@m0\d;hC9,#Ude&l6QRo7
map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Running, Direction.Right);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            Assert.AreEqual(expectedCreatureCoordinates[0], map.GetCreatureLocation(map.Player));

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Running, Direction.Left);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            Assert.AreEqual(expectedCreatureCoordinates[1], map.GetCreatureLocation(map.Player));

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Jumping, Direction.Right);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            map.Player.RecoverVelocity();
            Assert.AreEqual(expectedCreatureCoordinates[2], map.GetCreatureLocation(map.Player));

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Jumping, Direction.Left);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            map.Player.RecoverVelocity();
            Assert.AreEqual(expectedCreatureCoordinates[3], map.GetCreatureLocation(map.Player));

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Falling, Direction.Right);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            map.Player.RecoverVelocity();
            Assert.AreEqual(expectedCreatureCoordinates[4], map.GetCreatureLocation(map.Player));

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Falling, Direction.Left);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            map.Player.RecoverVelocity();
            Assert.AreEqual(expectedCreatureCoordinates[5], map.GetCreatureLocation(map.Player));

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Falling, Direction.NoMovement);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            map.Player.RecoverVelocity();
            Assert.AreEqual(expectedCreatureCoordinates[6], map.GetCreatureLocation(map.Player));
        }

        [Test]
        public void StartsFallingAfterJumpIfPlayerUnderTheCeilingAndStandsAfterLanding()
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel("test7.txt");
            map = new GameMap();

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Jumping, Direction.Right);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            Assert.AreEqual(MovementCondition.Falling, map.Player.MovementCondition);

            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            Assert.AreEqual(MovementCondition.Standing, map.Player.MovementCondition);
        }

        [Test]
        public void StartsFallingInSomeTimeAfterJump()
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel("test8.txt");
            map = new GameMap();

            map.Player.ChangeMovementConditionAndDirectionTo(MovementCondition.Jumping, Direction.Right);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            CreatureLocationAndConditionsUpdater.UpdateLocationAndCondition(map);
            Assert.AreEqual(MovementCondition.Falling, map.Player.MovementCondition);
        }

        [Test]
        public void PlayerCannotMoveIfSomethingIsNextToHim()
        {
            MapCreator.LoadLevels("LevelsForTests");
            MapCreator.GoToLevel("test9.txt");
            map = new GameMap();

            var initialPosition = map.GetCreatureLocation(map.Player);
            map.MoveCreature(map.Player, Direction.Right);
            Assert.AreEqual(initialPosition, map.GetCreatureLocation(map.Player));

            map.MoveCreature(map.Player, Direction.Left);
            Assert.AreEqual(initialPosition, map.GetCreatureLocation(map.Player));

            map.MoveCreature(map.Player, Direction.Down);
            Assert.AreEqual(initialPosition, map.GetCreatureLocation(map.Player));

            map.MoveCreature(map.Player, Direction.Up);
            Assert.AreEqual(initialPosition, map.GetCreatureLocation(map.Player));
        }

        private static MovementCondition[] GetMovementConditionsOfCreaturesOnMap()
        {
            return map.ListOfCreatures
                .OfType<IMovingCreature>()
                .Select(creature => creature.MovementCondition)
                .ToArray();
        }
    }
}