import numpy as np
from auxiliary_things.graph_board import GraphBoard
from auxiliary_things.point import Point
from auxiliary_things.utils import calculate_equilibrium_point
from limit_cycle_builder import (
    Input, build_trajectory_of_cycle,
    find_start_point_of_cycle)


def find_min_and_max_points_by_x(points: list[Point]) -> tuple[Point, Point]:
    min_point = Point(float('+inf'), float('+inf'))
    max_point = Point(float('-inf'), float('-inf'))
    for point in points:
        if point.x > max_point.x:
            max_point = point
        if point.x < min_point.x:
            min_point = point
    return min_point, max_point


def find_min_and_max_points_by_y(points: list[Point]) -> tuple[Point, Point]:
    min_point = Point(float('+inf'), float('+inf'))
    max_point = Point(float('-inf'), float('-inf'))
    for point in points:
        if point.y > max_point.y:
            max_point = point
        if point.y < min_point.y:
            min_point = point
    return min_point, max_point


def get_points_for_steady_graph(start: float, end: float, num: int):
    points_for_function_x = []
    points_for_function_y = []
    for b in np.linspace(start=start, stop=end, num=num):
        equilibrium = calculate_equilibrium_point(b)
        points_for_function_x.append(Point(b, equilibrium.x))
        points_for_function_y.append(Point(b, equilibrium.y))
    return points_for_function_x, points_for_function_y


def get_points_for_unsteady_graph(
        points_for_function_x: list,
        points_for_function_y: list,
        start: float,
        end: float,
        num: int,
        h: float):
    points_for_function_x_unstable = []
    points_for_function_x_min = []
    points_for_function_x_max = []
    last_point_x = points_for_function_x[-1]
    offset_x_min = None
    offset_x_max = None

    points_for_function_y_unstable = []
    points_for_function_y_min = []
    points_for_function_y_max = []
    last_point_y = points_for_function_y[-1]
    offset_y_min = None
    offset_y_max = None

    start_point = None
    points_xy = None
    accuracy = 10 ** -7
    for b in np.linspace(start=start, stop=end, num=num):
        inp = Input(b, h, accuracy)
        # start_point = find_start_point_of_cycle(inp, None)
        if start_point is None:
            start_point = find_start_point_of_cycle(inp, None)
        else:
            start_point = points_xy[-1]
        points_xy = build_trajectory_of_cycle(start_point, inp)
        min_x, max_x = find_min_and_max_points_by_x(points_xy)
        min_y, max_y = find_min_and_max_points_by_y(points_xy)
        if offset_x_min is None:
            offset_x_min = abs(last_point_x.x - min_x.x)
            offset_x_max = abs(last_point_x.x - max_x.x)
            offset_y_min = abs(last_point_y.y - min_y.y)
            offset_y_max = abs(last_point_y.y - max_y.y)
        points_for_function_x_min.append(Point(b, min_x.x + offset_x_min))
        points_for_function_x_max.append(Point(b, max_x.x - offset_x_max))
        points_for_function_y_min.append(Point(b, min_y.y + offset_y_min))
        points_for_function_y_max.append(Point(b, max_y.y - offset_y_max))

        equilibrium = calculate_equilibrium_point(b)
        points_for_function_x_unstable.append(Point(b, equilibrium.x))
        points_for_function_y_unstable.append(Point(b, equilibrium.y))

    points_for_function_x = [points_for_function_x_unstable[-1]]
    points_for_function_x += points_for_function_x_max[::-1]
    points_for_function_x += points_for_function_x_min
    points_for_function_x += [points_for_function_x_unstable[-1]]

    points_for_function_y = [points_for_function_y_unstable[-1]]
    points_for_function_y += points_for_function_y_max[::-1]
    points_for_function_y += points_for_function_y_min
    points_for_function_y += [points_for_function_y_unstable[-1]]

    return points_for_function_x, \
           points_for_function_y, \
           points_for_function_x_unstable, \
           points_for_function_y_unstable


def draw_bif_chart(start_b, stop_b, h, define_boundaries_of_instability=False):
    begin_of_unstable_focus = 0.42
    end_of_unstable_focus = 0.79
    graph_board_x = GraphBoard('β', 'x')
    graph_board_y = GraphBoard('β', 'y')

    if define_boundaries_of_instability:
        kwargs1 = {
            'x': begin_of_unstable_focus,
            'linestyle': '--',
            'linewidth': 0.4,
            'color': 'red'
            }
        kwargs2 = {
            'x': end_of_unstable_focus,
            'linestyle': '--',
            'linewidth': 0.4,
            'color': 'red'
            }
        graph_board_x.add_vertical_line(**kwargs1)
        graph_board_x.add_vertical_line(**kwargs2)
        graph_board_y.add_vertical_line(**kwargs1)
        graph_board_y.add_vertical_line(**kwargs2)

    points_for_function_x, points_for_function_y = get_points_for_steady_graph(
            start_b,
            begin_of_unstable_focus,
            int((begin_of_unstable_focus - start_b) / h)
            )
    graph_board_x.add_graph(points_for_function_x, color='black')
    graph_board_y.add_graph(points_for_function_y, color='black')
    points_for_function_x, \
    points_for_function_y, \
    points_for_function_x_unstable, \
    points_for_function_y_unstable = get_points_for_unsteady_graph(
            points_for_function_x,
            points_for_function_y,
            begin_of_unstable_focus,
            end_of_unstable_focus,
            int((end_of_unstable_focus - begin_of_unstable_focus) / h),
            h
            )
    graph_board_x.add_graph(points_for_function_x, color='black')
    graph_board_y.add_graph(points_for_function_y, color='black')
    graph_board_x.add_graph(
            points_for_function_x_unstable, linestyle='--', color='black')
    graph_board_y.add_graph(
            points_for_function_y_unstable, linestyle='--', color='black')
    points_for_function_x, \
    points_for_function_y = get_points_for_steady_graph(
            end_of_unstable_focus,
            stop_b,
            int((stop_b - end_of_unstable_focus) / h))
    graph_board_x.add_graph(points_for_function_x, color='black')
    graph_board_y.add_graph(points_for_function_y, color='black')
    graph_board_x.show()
    graph_board_y.show()


def main():
    start_b = 0
    stop_b = 3
    h = 0.01
    draw_bif_chart(start_b, stop_b, h, define_boundaries_of_instability=True)


if __name__ == '__main__':
    main()