!phpdotnet/phd/Autoloader.php
!phpdotnet/phd/Package/PHP/BigXHTML.php
!phpdotnet/phd/Package/IDE/Funclist.php

<?php
namespace phpdotnet\phd;

class Package_IDE_Funclist extends Format {
    protected $elementmap   = array(
        'refname'               => 'format_refname',
        'set'                   => 'format_set',
    );
    protected $textmap      = array(
        'refname'               => 'format_refname_text',
    );

    protected $isFunctionRefSet = false;
    protected $isRefname = false;
    protected $buffer = "";

    public function __construct() {
        $this->registerFormatName("IDE-Funclist");
        $this->setExt(Config::ext() === null ? ".txt" : Config::ext());
    }

    public function createLink($for, &$desc = null, $type = Format::SDESC) {}
    public function UNDEF($open, $name, $attrs, $props) {}
    public function TEXT($value) {}
    public function CDATA($value) {}
    public function transformFromMap($open, $tag, $name, $attrs, $props) {}

    public function appendData($data) {
        if ($data && $this->isFunctionRefSet && $this->isRefname) {
            $this->buffer .= $data . "\n";
        }
    }

    public function update($event, $value = null) {
        switch($event) {
        case Render::STANDALONE:
            $this->registerElementMap($this->elementmap);
            $this->registerTextMap($this->textmap);
            break;
       case Render::FINALIZE:
            $filename = Config::output_dir() . strtolower($this->getFormatName()) . $this->getExt();
            file_put_contents($filename, $this->buffer);
            break;
        case Render::VERBOSE:
            v("Starting %s rendering", $this->getFormatName(), VERBOSE_FORMAT_RENDERING);
            break;
        }
    }

    public function format_set($open, $name, $attrs, $props) {
        if (isset($attrs[Reader::XMLNS_XML]["id"]) && $attrs[Reader::XMLNS_XML]["id"] == "funcref") {
            $this->isFunctionRefSet = $open;
        }
        return "";
    }

    public function format_refname($open, $name, $attrs, $props) {
        $this->isRefname = $open;
        return "";
    }

    public function format_refname_text($value, $tag) {
        if (false !== strpos(trim($value), ' ')) {
            return;
        }
        return str_replace(array("::", "->", "()"), array(".", ".", ""), trim($value));
    }

}

<?php
namespace phpdotnet\phd;

require_once __DIR__ . DIRECTORY_SEPARATOR . 'Config.php';

class Autoloader
{
    public static function autoload($name)
    {
        // Only try autoloading classes we know about (i.e. from our own namespace)
        if (strncmp('phpdotnet\phd\\', $name, 14) === 0) {
            $filename = DIRECTORY_SEPARATOR . str_replace(array('\\', '_'), DIRECTORY_SEPARATOR, $name) . '.php';
            foreach(Config::package_dirs() as $dir) {
                $file = $dir . $filename;

                // Using fopen() because it has use_include_path parameter.
                if (!$fp = @fopen($file, 'r', true)) {
                    continue;
                }

                fclose($fp);
                require $file;

                return false;
            }
            v('Cannot find file for %s: %s', $name, $file, E_USER_ERROR);
        }

        return false;
    }
}

<?php
namespace phpdotnet\phd;

class Package_PHP_BigXHTML extends Package_PHP_XHTML {
    public function __construct() {
        parent::__construct();
        $this->registerFormatName("PHP-BigXHTML");
        $this->setTitle("PHP Manual");
        $this->setChunked(false);
    }

    public function __destruct() {
        $this->close();
    }

    public function header() {
        $style = $this->createCSSLinks();
        $style = $style ? "\n".$style : false;
        return <<<HEADER
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
 <head>
  <title>{$this->getTitle()}</title>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">{$style}
 </head>
 <body>
HEADER;
    }

    public function footer($eof = false) {
        return !$eof ?  "\n<hr />\n" : "</body>\n</html>";
    }

    public function close() {
        if ($this->getFileStream()) {
            fwrite($this->getFileStream(), $this->footer(true));
            fclose($this->getFileStream());
        }
    }

    public function createFileName() {
        $filename = Config::output_dir();
        if (Config::output_filename()) {
            $filename .= Config::output_filename();
        } else {
            $filename .= strtolower($this->getFormatName()) . $this->getExt();
        }
        return $filename;
    }

    public function createOutputFile() {
        if (!is_resource($this->getFileStream())) {
            $this->setFileStream(fopen($this->createFileName(), "w+"));
            fwrite($this->getFileStream(), $this->header());
        }
    }

    public function appendData($data) {
        if ($this->appendToBuffer) {
            $this->buffer .= $data;
            return;
        }
        if ($this->flags & Render::CLOSE) {
            fwrite($this->getFileStream(), $data);
            fwrite($this->getFileStream(), $this->footer());
            $this->flags ^= Render::CLOSE;
        } elseif ($this->flags & Render::OPEN) {
            fwrite($this->getFileStream(), $data."<hr />");
            $this->flags ^= Render::OPEN;
        } elseif ($data !== null) {
            fwrite($this->getFileStream(), $data);
        }

    }

    public function update($event, $val = null) {
        switch($event) {
        case Render::CHUNK:
            $this->flags = $val;
            break;

        case Render::STANDALONE:
            if ($val) {
                $this->registerElementMap(parent::getDefaultElementMap());
                $this->registerTextMap(parent::getDefaultTextMap());
            }
            break;

        case Render::INIT:
            if ($val) {
                $this->loadVersionAcronymInfo();
                $this->postConstruct();
                if (Config::css()) {
                    $this->fetchStylesheet();
                }
                $this->createOutputFile();
            }
            break;

        case Render::VERBOSE:
            v("Starting %s rendering", $this->getFormatName(), VERBOSE_FORMAT_RENDERING);
            break;
        }
    }

    public function createLink($for, &$desc = null, $type = self::SDESC) {
        $retval = '#' . $for;
        if (isset($this->indexes[$for])) {
            $result = $this->indexes[$for];
            if ($type === self::SDESC) {
                $desc = $result["sdesc"] ?: $result["ldesc"];
            } else {
                $desc = $result["ldesc"] ?: $result["sdesc"];
            }
        }
        return $retval;
    }

}