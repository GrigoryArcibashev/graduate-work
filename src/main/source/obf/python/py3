from collections import namedtuple #line:1
from math import cos ,log ,pi ,sin ,sqrt #line:2
import numpy as np #line:4
from numpy import linalg as LA #line:5
from my_code .five_semestr .auxiliary_things .graph_board import GraphBoard #line:7
from my_code .five_semestr .auxiliary_things .point import Point #line:8
from my_code .five_semestr .auxiliary_things .utils import calculate_equilibrium_point #line:9
Input =namedtuple ('Input',['param_b','intensity','q'])#line:13
def get_input ()->Input :#line:16
    OOO0OO00OO0OOO0OO =2 #line:17
    O0OOOO0000OOOOOOO =0.01 #line:18
    O0000OOOOO0000OOO =sqrt (-log (0.05 ))#line:19
    return Input (OOO0OO00OO0OOO0OO ,O0OOOO0000OOOOOOO ,O0000OOOOO0000OOO )#line:20
def get_sensitivity_matrix (O00OOOO00OO0OOO00 :Point )->list [list [float ]]:#line:23
    ""#line:29
    OO00O0O0OOO000OOO =O00OOOO00OO0OOO00 .x #line:30
    O00O0OO0000O0OO00 =O00OOOO00OO0OOO00 .y #line:31
    O000OOO0000O00OO0 =-(2 *OO00O0O0OOO000OOO *O00O0OO0000O0OO00 -0.5 )*(OO00O0O0OOO000OOO *O00O0OO0000O0OO00 -1 )/((2 *OO00O0O0OOO000OOO *O00O0OO0000O0OO00 -1 )*(OO00O0O0OOO000OOO *OO00O0O0OOO000OOO -OO00O0O0OOO000OOO *O00O0OO0000O0OO00 +1.1 ))#line:33
    O0OO0O0OOOO000OOO =-((OO00O0O0OOO000OOO *OO00O0O0OOO000OOO +0.1 )*O000OOO0000O00OO0 +0.5 )/(2 *OO00O0O0OOO000OOO *O00O0OO0000O0OO00 -1 )#line:34
    OOO0OOO000O0O0O0O =(2 *OO00O0O0OOO000OOO *O00O0OO0000O0OO00 *O000OOO0000O00OO0 +0.5 )/(OO00O0O0OOO000OOO *OO00O0O0OOO000OOO +0.1 )#line:35
    return [[O0OO0O0OOOO000OOO ,O000OOO0000O00OO0 ],[O000OOO0000O00OO0 ,OOO0OOO000O0O0O0O ]]#line:36
def get_eigenvalues_of_sensitivity_matrix (O0OOOO0O00000000O :list [list [float ]]):#line:39
    O0OOO000OO00OOO0O ,OO00OO00OOOOO000O =LA .eig (np .array (O0OOOO0O00000000O ))#line:40
    return O0OOO000OO00OOO0O #line:41
def get_eigenvectors_of_sensitivity_matrix (O0000O0O00000000O :list [list [float ]]):#line:44
    O00O00OOO00000O00 ,OOO000OO0O00O0000 =LA .eig (np .array (O0000O0O00000000O ))#line:45
    return OOO000OO0O00O0000 #line:46
def generate_points_of_scattering_ellipse (O0O0OOOO0OO00O000 :float ,OOO00OO000OOO0O00 :Point ,OOOOO00O00OOOO000 :float ,O00OO0O0OOO0OO000 :float )->list [Point ]:#line:53
    OOO0OOOO0000O0O0O =get_sensitivity_matrix (OOO00OO000OOO0O00 )#line:54
    OOOO00O00000OO00O =get_eigenvalues_of_sensitivity_matrix (OOO0OOOO0000O0O0O )#line:55
    O0OO0000OOO0O0OO0 =get_eigenvectors_of_sensitivity_matrix (OOO0OOOO0000O0O0O )#line:56
    O0OOO00O0OO00000O =calculate_equilibrium_point (O0O0OOOO0OO00O000 )#line:57
    OO00OOO000OOOOOO0 =[]#line:58
    for O0OO0O0O00OO00O0O in np .linspace (0 ,2 *pi ,360 *4 ):#line:59
        OOOO0OOO000000OOO =OOOOO00O00OOOO000 *O00OO0O0OOO0OO000 *sqrt (2 *OOOO00O00000OO00O [0 ])*cos (O0OO0O0O00OO00O0O )#line:60
        O00O0OO0O0OO0O0O0 =OOOOO00O00OOOO000 *O00OO0O0OOO0OO000 *sqrt (2 *OOOO00O00000OO00O [1 ])*sin (O0OO0O0O00OO00O0O )#line:61
        OO0OOOO0OO000O000 =O0OOO00O0OO00000O .x +(OOOO0OOO000000OOO *O0OO0000OOO0O0OO0 [1 ][1 ]-O00O0OO0O0OO0O0O0 *O0OO0000OOO0O0OO0 [0 ][1 ])/(O0OO0000OOO0O0OO0 [0 ][0 ]*O0OO0000OOO0O0OO0 [1 ][1 ]-O0OO0000OOO0O0OO0 [0 ][1 ]*O0OO0000OOO0O0OO0 [1 ][0 ])#line:64
        O0OO00O00O00O0O0O =O0OOO00O0OO00000O .y +(O00O0OO0O0OO0O0O0 *O0OO0000OOO0O0OO0 [0 ][0 ]-OOOO0OOO000000OOO *O0OO0000OOO0O0OO0 [1 ][0 ])/(O0OO0000OOO0O0OO0 [0 ][0 ]*O0OO0000OOO0O0OO0 [1 ][1 ]-O0OO0000OOO0O0OO0 [0 ][1 ]*O0OO0000OOO0O0OO0 [1 ][0 ])#line:67
        OO00OOO000OOOOOO0 .append (Point (OO0OOOO0OO000O000 ,O0OO00O00O00O0O0O ))#line:68
    return OO00OOO000OOOOOO0 #line:69
def main ():#line:72
    OOOO0OOOOOOO00OO0 =get_input ()#line:73
    O00OO0OO000OOOO0O =calculate_equilibrium_point (OOOO0OOOOOOO00OO0 .param_b )#line:74
    O0O0OO00O000O00OO =generate_points_of_scattering_ellipse (OOOO0OOOOOOO00OO0 .param_b ,O00OO0OO000OOOO0O ,OOOO0OOOOOOO00OO0 .intensity ,OOOO0OOOOOOO00OO0 .q )#line:79
    O0O0OO00OO0000OOO =GraphBoard ('x','y')#line:80
    O0O0OO00OO0000OOO .add_graph (O0O0OO00O000O00OO )#line:81
    O0O0OO00OO0000OOO .show ()#line:82
if __name__ =='__main__':#line:85
    main ()#line:86
def get_first_root_of_char_eq (O0OOOOO00OO00O0O0 :float )->float :#line:88
    OOOO0000O00O0OO0O =0.05 /(1 +10 *O0OOOOO00OO00O0O0 *O0OOOOO00OO00O0O0 )#line:89
    O000OOOOOOOO00000 =complex (81 -2960 *O0OOOOO00OO00O0O0 **2 -3400 *O0OOOOO00OO00O0O0 **4 -56000 *O0OOOOO00OO00O0O0 **6 +10000 *O0OOOOO00OO00O0O0 **8 )**0.5 #line:95
    OOOO0000O00O0OO0O *=(-11 +80 *O0OOOOO00OO00O0O0 **2 -100 *O0OOOOO00OO00O0O0 **4 -O000OOOOOOOO00000 )#line:96
    return OOOO0000O00O0OO0O .real #line:97
def get_second_root_of_char_eq (O00OO0OO000O00OO0 :float )->float :#line:100
    O00OOO0OO0OOO0OOO =0.05 /(1 +10 *O00OO0OO000O00OO0 *O00OO0OO000O00OO0 )#line:101
    O00O00OOO0OOOOO00 =complex (81 -2960 *O00OO0OO000O00OO0 **2 -3400 *O00OO0OO000O00OO0 **4 -56000 *O00OO0OO000O00OO0 **6 +10000 *O00OO0OO000O00OO0 **8 )**0.5 #line:107
    O00OOO0OO0OOO0OOO *=(-11 +80 *O00OO0OO000O00OO0 **2 -100 *O00OO0OO000O00OO0 **4 +O00O00OOO0OOOOO00 )#line:108
    return O00OOO0OO0OOO0OOO .real #line:109
def f_x (O0OOOO00OO00O0OO0 :float ,O000OOOOO0OO00O0O :float )->float :#line:111
    return -1 +2 *O0OOOO00OO00O0OO0 *O000OOOOO0OO00O0O #line:112
def f_y (O0000O0O0OO00O000 :float ,OOOO0OOO00OO0OO0O :float )->float :#line:115
    return 0.1 +O0000O0O0OO00O000 *O0000O0O0OO00O000 #line:116
def g_x (O000OO00OOOOO00OO :float ,OOO00O00OOO0OO0OO :float )->float :#line:119
    return -2 *O000OO00OOOOO00OO *OOO00O00OOO0OO0OO #line:120
def g_y (O00OOOO00O0OOO000 :float ,O0O0OO0O000O0000O :float )->float :#line:123
    return -0.1 -O00OOOO00O0OOO000 *O00OOOO00O0OOO000 #line:124
